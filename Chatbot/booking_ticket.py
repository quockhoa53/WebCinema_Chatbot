import json
import random
import re

import unicodedata
from rapidfuzz import process
from unidecode import unidecode
import chromadb_training
import database_helper
import movie_suggestions

with open('intents.json', encoding='utf-8') as intents_file:
    intents_data = json.load(intents_file)

def extract_entities(sentence, compiled_entity_patterns):
    found_entities = {}
    for entity, patterns in compiled_entity_patterns.items():
        for pattern in patterns:
            if pattern.search(sentence):
                found_entities[entity] = pattern.pattern.strip(r'\b').strip(r'\\')
                break
    return found_entities

'''def process_booking_request(message, intent_predictions, recognized_entities, movie_name, current_context):
    if not recognized_entities:
        movie_name[0] = chromadb_training.search_stored_data(message,chromadb_training.phim_path)
        if movie_name[0] == None:
            intent_predictions = [{"intent": "dat_ve_khong_thuc_the", "probability": "1.0"}]
        else:
            intent_predictions = [{"intent": "khong_tim_thay_phim", "probability": "1.0"}]
    return booking_ticket_response(message,intent_predictions, recognized_entities, movie_name, current_context)'''


def normalize_string(s):
    return unicodedata.normalize('NFKC', s.strip().lower())

def process_booking_request(message, intent_predictions, recognized_entities, movie_name, current_context):
    if not recognized_entities:
        # Danh s√°ch c√°c t√™n phim c√≥ s·∫µn
        movie_list = database_helper.get_ten_phim()
        message_normalized = normalize_string(message)
        movie_list_normalized = [normalize_string(movie) for movie in movie_list]
        # T√¨m ki·∫øm t√™n phim g·∫ßn gi·ªëng nh·∫•t v·ªõi c√¢u ng∆∞·ªùi d√πng nh·∫≠p
        best_match = process.extractOne(message_normalized, movie_list_normalized)
        print(best_match)
        if best_match: # G√°n t√™n phim t∆∞∆°ng t·ª± v√†o movie_name
            if best_match[1] >= 90:
                movie_name[0] = best_match[0]
                intent_predictions = [{"intent": "dat_ve_co_thuc_the", "probability": "1.0"}]
            elif 90.0 > best_match[1] > 50.0:
                movie_name[0] = best_match[0]
                intent_predictions = [{"intent": "khong_tim_thay_phim", "probability": "1.0"}]
            else:
                intent_predictions = [{"intent": "dat_ve_khong_thuc_the", "probability": "1.0"}]
    return booking_ticket_response(message, intent_predictions, recognized_entities, movie_name, current_context)
'''
def booking_ticket_response(message, intent_list, entities, movie_name, current_context):
    if not intent_list:
        return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n 3 ."

    intent_tag = intent_list[0]['intent']
    for intent in intents_data['intents']:
        if intent['tag'] == intent_tag:
            response = random.choice(intent['responses'])
            current_context[0] = "booking_ticket"

            if entities:
                for entity, value in entities.items():
                    value = value.replace("\\", "")  # Lo·∫°i b·ªè d·∫•u g·∫°ch ch√©o ng∆∞·ª£c
                    print(entity, value)
                    response = response.replace(f"<{entity}>", value)
                    movie_name[0] = value
            elif movie_name[0] != None:
                response = response.replace("<TenPhim>", movie_name[0])
            if "<GioChieu>" in response:
                gio_ngay_chieu = database_helper.get_gio_ngay_chieu(movie_name[0])
                if gio_ngay_chieu:
                    index = 0
                    lich_chieu_temp = "<p>"  # D√πng <p> ƒë·ªÉ ng·∫Øt d√≤ng trong HTML
                    for gio_chieu in gio_ngay_chieu:
                        index += 1
                        lich_chieu_temp += f" - L·ªãch chi·∫øu {index}: {gio_chieu} <br>"  # Th√™m <br> ƒë·ªÉ xu·ªëng d√≤ng
                    lich_chieu_temp += "</p>"
                    response = response.replace("<GioChieu>", lich_chieu_temp)

                    lich_chieu_list = []
                    for index, gio_chieu in enumerate(gio_ngay_chieu, start=1):
                        lich_chieu_list.append({"LichChieu": index, "ThoiGian": gio_chieu})

                    # T·∫°o chu·ªói l·ªãch chi·∫øu d∆∞·ªõi d·∫°ng HTML ƒë·ªÉ hi·ªÉn th·ªã trong ph·∫£n h·ªìi
                    lich_chieu_temp = "<p>" + "<br>".join(
                        [f"L·ªãch chi·∫øu {item['LichChieu']}: {item['ThoiGian']}" for item in lich_chieu_list]
                    ) + "</p>"

                    response = response.replace("<GioChieu>", lich_chieu_temp)

                    # Ghi d·ªØ li·ªáu `lich_chieu_list` v√†o `temp.json`
                    try:
                        with open('temp.json', 'w', encoding='utf-8') as f:
                            json.dump({"lich_chieu": lich_chieu_list, "movie_name": movie_name[0]}, f,
                                      ensure_ascii=False, indent=4)
                    except Exception as e:
                        print(f"L·ªói khi ghi d·ªØ li·ªáu v√†o temp.json: {e}")
                else:
                    return "Xin l·ªói qu√Ω kh√°ch, hi·ªán t·∫°i r·∫°p ch∆∞a c√≥ l·ªãch chi·∫øu cho phim "
            movie_name, ngay_chieu, gio_chieu = search_schedule(message)
            if movie_name != None and ngay_chieu != None and gio_chieu != None:
                print(movie_name, ngay_chieu, gio_chieu)
                masc = database_helper.LayMaSuatChieu(current_context, movie_name, ngay_chieu, gio_chieu)
                return f"<p>T√¥i xin g·ª≠i link ƒë·∫∑t gh·∫ø: <a href='http://localhost:9999/DoAnWebCinema/customer/payment/{masc}.htm'>ƒê·∫∑t gh·∫ø t·∫°i ƒë√¢y</a></p>"
            return response

    return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n 4 ."
'''


def booking_ticket_response(message, intent_list, entities, movie_name, current_context):
    if not intent_list:
        return "Sorry, I didn't fully understand your request"

    intent_tag = intent_list[0]['intent']
    for intent in intents_data['intents']:
        if intent['tag'] == intent_tag:
            response = random.choice(intent['responses'])
            current_context[0] = "booking_ticket"

            # X·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p t√™n phim
            if entities:
                for entity, value in entities.items():
                    value = value.replace("\\", "")
                    response = response.replace(f"<{entity}>", value)
                    movie_name[0] = value

            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë√£ c√≥ t√™n phim t·ª´ ng·ªØ c·∫£nh tr∆∞·ªõc
            elif movie_name[0] != None:
                response = response.replace("<TenPhim>", movie_name[0].title())

            # X·ª≠ l√Ω l·ªãch chi·∫øu (n·∫øu c·∫ßn hi·ªÉn th·ªã l·ªãch chi·∫øu)
            if "<GioChieu>" in response:
                gio_ngay_chieu_theo_chi_nhanh = database_helper.get_gio_ngay_chieu_theo_chi_nhanh(movie_name[0].title())
                if gio_ngay_chieu_theo_chi_nhanh:
                    # T·∫°o ph·∫£n h·ªìi l·ªãch chi·∫øu theo ƒë·ªãnh d·∫°ng b·∫°n y√™u c·∫ßu
                    lich_chieu_temp = ""
                    index = 1  # S·ªë th·ª© t·ª± l·ªãch chi·∫øu
                    for chi_nhanh, gio_ngay_chieu_list in gio_ngay_chieu_theo_chi_nhanh.items():
                        lich_chieu_temp += f"""
                        <div>
                            Branch <b><span style="color: red;">{chi_nhanh}</span></b><br>
                        </div>
                        """
                        for gio_ngay in gio_ngay_chieu_list:
                            lich_chieu_temp += f" üéü Showtime Schedule {index}: {gio_ngay} <br>"
                            index += 1  # TƒÉng s·ªë th·ª© t·ª±

                    # Th√™m th√¥ng tin l·ªãch chi·∫øu v√†o ph·∫£n h·ªìi
                    response = response.replace("<GioChieu>", lich_chieu_temp)

                    # Ghi d·ªØ li·ªáu l·ªãch chi·∫øu v√†o t·ªáp `temp.json`
                    try:
                        lich_chieu_list = [
                            {"ChiNhanh": chi_nhanh, "LichChieu": gio_ngay_chieu_list}
                            for chi_nhanh, gio_ngay_chieu_list in gio_ngay_chieu_theo_chi_nhanh.items()
                        ]
                        with open('temp.json', 'w', encoding='utf-8') as f:
                            json.dump(
                                {"lich_chieu": lich_chieu_list, "movie_name": movie_name[0]},
                                f,
                                ensure_ascii=False,
                                indent=4
                            )
                    except Exception as e:
                        print(f"Error writing data to temp.json: {e}")
                else:
                    return f"Sorry, the theater currently does not have a showtime available for the movie {movie_name[0]}."

            movie_name, ngay_chieu, gio_chieu = search_schedule(message)
            if movie_name and ngay_chieu and gio_chieu:
                masc = database_helper.LayMaSuatChieu(current_context, movie_name, ngay_chieu, gio_chieu)
                return movie_suggestions.get_random_response("select_showtime", showtime=f"{gio_chieu} ng√†y {ngay_chieu}") + f" <u><a href='http://localhost:9999/DoAnWebCinema/customer/payment/{masc}.htm'>Book your seat here,</a></u> Wish you a wonderful experience ‚ù§"

            return response

    return "Sorry, I didn't fully understand your request üò•"

def process_verify_schedule(message, intent_predictions, recognized_entities, current_context):
    if not search_schedule(message):
        intent_predictions = [{"intent": "xac_nhan_dung_lich_chieu", "probability": "1.0"}]
        return verify_schedule_response(intent_predictions, recognized_entities,None ,current_context)
    else:
        return verify_schedule_response(intent_predictions, recognized_entities, None,current_context)
def verify_schedule_response(intent_list, entities, movie_name, current_context):
    if not intent_list:
        return "Sorry, I didn't fully understand your requestüò•"

    intent_tag = intent_list[0]['intent']
    for intent in intents_data['intents']:
        if intent['tag'] == intent_tag:
            response = random.choice(intent['responses'])
            if intent['context_set'] != "no_context":
                current_context[0]  = intent['context_set']
            else:
                current_context[0]  = None
            return response
    return "Sorry, I didn't fully understand your request üò•"



'''def search_schedule(query):
    try:
        with open('temp.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        movie_name = data.get('movie_name', 'Kh√¥ng c√≥ t√™n phim')
        match = re.search(r'\d+', query)
        if "lich chieu" in unidecode(query.lower()) and match:
            so_thu_tu = int(match.group())
            lich_chieu = next((item for item in data['lich_chieu'] if item['LichChieu'] == so_thu_tu), None)
            if lich_chieu:
                # T√°ch th·ªùi gian ra ƒë·ªÉ l·∫•y ng√†y v√† gi·ªù
                thoi_gian = lich_chieu['ThoiGian']
                gio_chieu = re.search(r'\d{1,2}:\d{2}', thoi_gian).group()
                ngay_chieu = re.search(r'\d{2}/\d{2}/\d{4}', thoi_gian).group()
                return movie_name, ngay_chieu, gio_chieu
            else:
                return None, None, None

        # T√¨m theo ng√†y gi·ªù ho·∫∑c m·ªôt ph·∫ßn c·ªßa ng√†y gi·ªù
        for lich_chieu in data['lich_chieu']:
            thoi_gian = lich_chieu['ThoiGian']
            if query in thoi_gian:
                gio_chieu = re.search(r'\d{1,2}:\d{2}', thoi_gian).group()
                ngay_chieu = re.search(r'\d{2}/\d{2}/\d{4}', thoi_gian).group()
                return movie_name, ngay_chieu, gio_chieu

        return None, None, None

    except FileNotFoundError:
        print("File temp.json kh√¥ng t·ªìn t·∫°i.")
        return None, None, None
    except json.JSONDecodeError:
        print("L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ temp.json.")
        return None, None, None'''

def search_schedule(query):
    """
    T√¨m th√¥ng tin l·ªãch chi·∫øu d·ª±a tr√™n truy v·∫•n c·ªßa ng∆∞·ªùi d√πng.
    Truy v·∫•n c√≥ th·ªÉ ch·ª©a s·ªë th·ª© t·ª± l·ªãch chi·∫øu ho·∫∑c m·ªôt ph·∫ßn th·ªùi gian (gi·ªù ho·∫∑c ng√†y).
    """
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ t·ªáp temp.json
        with open('temp.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        movie_name = data.get('movie_name', 'Kh√¥ng c√≥ t√™n phim')

        # Ki·ªÉm tra n·∫øu truy v·∫•n ch·ª©a "lich chieu" v√† s·ªë th·ª© t·ª± l·ªãch chi·∫øu
        match = re.search(r'\d+', query)
        if "lich chieu" in unidecode(query.lower()) and match:
            so_thu_tu = int(match.group())

            # Duy·ªát qua t·ª´ng chi nh√°nh ƒë·ªÉ t√¨m l·ªãch chi·∫øu c√≥ s·ªë th·ª© t·ª± ph√π h·ª£p
            for chi_nhanh in data['lich_chieu']:
                for index, thoi_gian in enumerate(chi_nhanh['LichChieu'], start=1):
                    if index == so_thu_tu:
                        gio_chieu = re.search(r'\d{1,2}:\d{2}', thoi_gian).group()
                        ngay_chieu = re.search(r'\d{2}/\d{2}/\d{4}', thoi_gian).group()
                        return movie_name, ngay_chieu, gio_chieu

        # N·∫øu kh√¥ng t√¨m th·∫•y theo s·ªë th·ª© t·ª±, ki·ªÉm tra theo chu·ªói ng√†y gi·ªù ho·∫∑c m·ªôt ph·∫ßn c·ªßa ng√†y gi·ªù
        for chi_nhanh in data['lich_chieu']:
            for thoi_gian in chi_nhanh['LichChieu']:
                if query in thoi_gian:
                    gio_chieu = re.search(r'\d{1,2}:\d{2}', thoi_gian).group()
                    ngay_chieu = re.search(r'\d{2}/\d{2}/\d{4}', thoi_gian).group()
                    return movie_name, ngay_chieu, gio_chieu

        # N·∫øu kh√¥ng kh·ªõp v·ªõi l·ªãch chi·∫øu n√†o
        return None, None, None

    except FileNotFoundError:
        print("File temp.json kh√¥ng t·ªìn t·∫°i.")
        return None, None, None
    except json.JSONDecodeError:
        print("L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ temp.json.")
        return None, None, None

def search_seats(query):
    try:
        with open('entities.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        seats = data.get('TenGhe', [])
        result = [seat for seat in seats if query.lower() in seat.lower()]

        if result:
            return result
        else:
            return "No seats found matching the keyword you entered.."

    except FileNotFoundError:
        return "File entities.json kh√¥ng t·ªìn t·∫°i."
    except json.JSONDecodeError:
        return "L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ file entities.json."



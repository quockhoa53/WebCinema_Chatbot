package poly.controller;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.transaction.Transactional;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import poly.entity.KhachHang;
import poly.entity.NhanVien;
import poly.entity.TaiKhoan;
import externalFunc.func;

@Transactional
@Controller
@RequestMapping("/login")
public class LoginController {
    @Autowired
    SessionFactory factory;

    @RequestMapping(method = RequestMethod.GET)
    public String index(ModelMap model, HttpServletRequest request, HttpSession ss) {
        // Kiểm tra nếu không có người dùng trong session
        if (ss.getAttribute("tk") == null) {
            model.addAttribute("login", false);
        } else {
            // Nếu đã đăng nhập, có thể chuyển hướng hoặc làm gì đó
            model.addAttribute("login", true);
        }
        return "login";
    }

    public NhanVien layNV(String email) {
        email = email.trim();
        Session session = factory.getCurrentSession();
        String hql = "FROM NhanVien WHERE Email = :email";
        Query query = session.createQuery(hql);
        query.setParameter("email", email);
        List<NhanVien> list = query.list();
        return list.isEmpty() ? null : list.get(0);
    }

    @RequestMapping(value = "/login", method = RequestMethod.POST)
    public String insert(ModelMap model, HttpServletRequest request, HttpSession ss) throws NoSuchAlgorithmException {
        // Xóa thông tin người dùng cũ trong session (nếu có)
        ss.removeAttribute("user");
        ss.removeAttribute("tk");
        ss.removeAttribute("mk");

        String username = request.getParameter("email");
        String password = request.getParameter("password");

        username = username.trim();
        password = password.trim();
        
        // Mã hóa mật khẩu bằng MD5
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(password.getBytes());
        byte[] digest = md.digest();
        String myHash = func.bytesToHex(digest).toLowerCase();

        boolean kt = true;
        // Kiểm tra mật khẩu
        if (password.isEmpty()) {
            model.addAttribute("errorMK", "Password cannot be empty!");
            kt = false;
        }

        if (!kt) {
            return "login";
        }

        Session session = factory.getCurrentSession();
        String hql = "FROM TaiKhoan";
        Query query = session.createQuery(hql);
        List<TaiKhoan> list = query.list();

        for (TaiKhoan u : list) {
            if (username.equals(u.getEmail().trim())) {
                if (!myHash.equals(u.getPassword().trim())) {
                    model.addAttribute("messageA", "Incorrect password!");
                    model.addAttribute("login", false);
                    return "login";
                } else {
                    // Lưu thông tin vào session thay vì biến static
                    ss.setAttribute("tk", u);
                    ss.setAttribute("mk", password);

                    if (u.getQuyen().getMaQuyen().trim().equals("QL")) {
                        NhanVien nv = u.getNhanvienlist().iterator().next();
                        ss.setAttribute("user", nv);
                        return "redirect:/admin/profile.htm";
                    } else if (u.getQuyen().getMaQuyen().trim().equals("KH")) {
                        KhachHang kh = u.getKhachhanglist().iterator().next();
                        ss.setAttribute("user", kh);
                        ss.setAttribute("login", true);
                        String backUrl = (String) ss.getAttribute("BackUrl");
                        return backUrl == null ? "redirect:/trangchu.htm" : "redirect:" + backUrl;
                    } else if (u.getQuyen().getMaQuyen().trim().equals("NV")) {
                        NhanVien nv = u.getNhanvienlist().iterator().next();
                        ss.setAttribute("user", nv);
                        return "redirect:/staff/profile.htm";
                    } else {
                        model.addAttribute("messageA", "Please log in again!");
                        model.addAttribute("login", false);
                        return "login";
                    }
                }
            }
        }
        model.addAttribute("messageA", "Email does not exist!");
        model.addAttribute("login", false);
        return "login";
    }

    @RequestMapping("logout")
    public String logout(HttpSession ss) {
        // Xóa thông tin trong session
        ss.removeAttribute("tk");
        ss.removeAttribute("user");
        ss.removeAttribute("mk");
        ss.removeAttribute("login");
        return "login";
    }
}
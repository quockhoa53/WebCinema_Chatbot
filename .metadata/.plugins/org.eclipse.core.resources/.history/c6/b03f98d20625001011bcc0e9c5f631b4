package admin.controller;

import java.io.File;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.transaction.Transactional;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import poly.entity.ChiNhanh;
import poly.entity.DaoDien;
import poly.entity.DienVien;
import poly.entity.KhachHang;
import poly.entity.LichChieu;
import poly.entity.NhanVien;
import poly.entity.Phim;
import poly.entity.PhongChieu;
import poly.entity.TaiKhoan;
import poly.entity.TheLoai;
import poly.entity.Ve;
import poly.entity.VaiDien;

@Transactional
@Controller
@RequestMapping("/admin/")
public class ShowController {
    @Autowired
    SessionFactory factory;

    @Autowired
    ServletContext context;

    public List<KhachHang> getUsers() {
        Session session = factory.getCurrentSession();
        String hql = "FROM KhachHang";
        Query query = session.createQuery(hql);
        return query.list();
    }

    public List<Ve> getVes() {
        Session session = factory.getCurrentSession();
        String hql = "FROM Ve";
        Query query = session.createQuery(hql);
        return query.list();
    }

    public List<Phim> getPhims() {
        Session session = factory.getCurrentSession();
        String hql = "FROM Phim WHERE maTT IN (0, 1)";
        Query query = session.createQuery(hql);
        return query.list();
    }

    public List<Phim> getListPhims() {
        Session session = factory.getCurrentSession();
        String hql = "FROM Phim";
        Query query = session.createQuery(hql);
        return query.list();
    }

    public List<Phim> getMoviesByMonthAndYear(Integer month, Integer year) {
        Session session = factory.getCurrentSession();
        String hql = "FROM Phim p WHERE MONTH(p.ngayKhoiChieu) = :month AND YEAR(p.ngayKhoiChieu) = :year";
        Query query = session.createQuery(hql);
        query.setParameter("month", month);
        query.setParameter("year", year);
        return query.list();
    }

    public List<DienVien> getDanhSachDienVien() {
        Session session = factory.getCurrentSession();
        String hql = "FROM DienVien ORDER BY tenDienVien ASC";
        Query query = session.createQuery(hql);
        return query.list();
    }

    @RequestMapping(value = "/dashboard.htm", method = RequestMethod.GET)
    public String filterMoviesByMonth(
            @RequestParam(value = "month", required = false, defaultValue = "1") Integer month,
            @RequestParam(value = "year", required = false, defaultValue = "2024") Integer year,
            Model model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        int countUser = getUsers().size();
        int countVe = getVes().size();
        int countPhim = getPhims().size();
        List<Phim> phimList = getMoviesByMonthAndYear(month, year);
        Map<Integer, Double> doanhThuTheoPhim = new HashMap<>();
        for (Phim phim : phimList) {
            Double doanhThu = tinhTongDoanhThuTheoPhim(phim.getMaPhim());
            doanhThuTheoPhim.put(phim.getMaPhim(), doanhThu);
        }
        Double tongDoanhThu = tinhTongDoanhThu();
        model.addAttribute("phim", phimList);
        model.addAttribute("countUser", countUser);
        model.addAttribute("countVe", countVe);
        model.addAttribute("countPhim", countPhim);
        model.addAttribute("doanhThuTheoPhim", doanhThuTheoPhim);
        model.addAttribute("tongDoanhThu", tongDoanhThu);
        return "admin/dashboard";
    }

    @RequestMapping("profile")
    public String profile(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        String matKhau = (String) session.getAttribute("mk");

        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        model.addAttribute("tk", taiKhoan);
        model.addAttribute("user", nhanVien);
        model.addAttribute("mk", matKhau);

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        model.addAttribute("chiNhanh", chiNhanh);

        return "admin/profile";
    }

    @RequestMapping(value = "employee", method = RequestMethod.GET)
    public String employee(ModelMap model, HttpServletRequest request, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");

        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        model.addAttribute("tk", taiKhoan);
        model.addAttribute("user", nhanVien);

        Session dbSession = factory.getCurrentSession();
        String hql = "SELECT nv FROM NhanVien nv JOIN nv.dstaikhoan tk WHERE tk.quyen.maQuyen = 'NV'";
        Query query = dbSession.createQuery(hql);
        List<NhanVien> list = query.list();
        model.addAttribute("nv", list);
        model.addAttribute("NhanVien", new NhanVien());
        model.addAttribute("TaiKhoan", new TaiKhoan());
        return "admin/employee";
    }

    @RequestMapping("customer")
    public String customer(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM KhachHang";
        Query query = dbSession.createQuery(hql);
        List<KhachHang> list = query.list();
        model.addAttribute("kh", list);
        return "admin/customer";
    }

    @RequestMapping("type")
    public String type(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM TheLoai";
        Query query = dbSession.createQuery(hql);
        List<TheLoai> list = query.list();
        model.addAttribute("type", list);
        return "admin/type";
    }

    @RequestMapping("movie")
    public String movie(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hqlPhim = "FROM Phim p JOIN FETCH p.vaiDiens v";
        Query queryPhim = dbSession.createQuery(hqlPhim);
        List<Phim> listPhim = queryPhim.list();
        model.addAttribute("phim", listPhim);
        model.addAttribute("listDienVien", getDanhSachDienVien());
        model.addAttribute("dsCTTL", getAllCTTL());
        return "admin/movie";
    }

    public List<TheLoai> getAllCTTL() {
        Session dbSession = factory.getCurrentSession();
        String hql = "FROM TheLoai";
        Query query = dbSession.createQuery(hql);
        return query.list();
    }

    @RequestMapping("ticket")
    public String ticket(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        Integer maChiNhanh = chiNhanh.getMaChiNhanh();
        Session dbSession = factory.getCurrentSession();
        String hql = "FROM Ve v JOIN v.dsLichChieu lc JOIN lc.dsPhong p JOIN p.chiNhanh cn WHERE cn.maChiNhanh = :maChiNhanh";
        Query query = dbSession.createQuery(hql);
        query.setParameter("maChiNhanh", maChiNhanh);
        List<Ve> list = query.list();
        model.addAttribute("lv", list);
        return "admin/ticket";
    }

    @RequestMapping("room")
    public String room(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        Integer maChiNhanh = chiNhanh.getMaChiNhanh();
        Session dbSession = factory.getCurrentSession();
        String sql = "{call UpdateTrangThaiPhong()}";
        Query querySP = dbSession.createSQLQuery(sql);
        querySP.executeUpdate();

        String hql = "FROM PhongChieu WHERE maChiNhanh = :maChiNhanh";
        Query query = dbSession.createQuery(hql);
        query.setParameter("maChiNhanh", maChiNhanh);
        List<PhongChieu> list = query.list();

        for (PhongChieu phong : list) {
            String hqlSeats = "SELECT COUNT(c) FROM ChiTietGhePhong c WHERE c.phong.maPhong = :maPhong";
            Query querySeats = dbSession.createQuery(hqlSeats);
            querySeats.setParameter("maPhong", phong.getMaPhong());
            Long totalSeats = (Long) querySeats.uniqueResult();
            phong.setTongSoGhe(totalSeats.intValue());
        }

        model.addAttribute("pc", list);
        return "admin/room";
    }

    @RequestMapping("directors")
    public String directors(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM DaoDien";
        Query query = dbSession.createQuery(hql);
        List<DaoDien> list = query.list();
        Map<Integer, Double> doanhThuTheoDaoDien = new HashMap<>();
        for (DaoDien daodien : list) {
            Double doanhThu = tinhTongDoanhThuTheoDaoDien(daodien.getIdDaoDien());
            doanhThuTheoDaoDien.put(daodien.getIdDaoDien(), doanhThu);
        }
        model.addAttribute("doanhthu", doanhThuTheoDaoDien);
        model.addAttribute("daodien", list);
        return "admin/directors";
    }

    @RequestMapping(value = "directors/add.htm", method = RequestMethod.POST)
    public String addDirector(ModelMap model, @ModelAttribute("daoDien") DaoDien daoDien,
                             @RequestParam("directorPhoto") MultipartFile daodienPhoto,
                             HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        try {
            if (daodienPhoto.isEmpty()) {
                redirectAttributes.addFlashAttribute("message",
                        new Message("error", "Vui lòng chọn file ảnh!"));
                return "redirect:/admin/directors.htm";
            }

            String fileName = daodienPhoto.getOriginalFilename();
            if (!fileName.matches(".*\\.(jpg|jpeg|png|gif)$")) {
                redirectAttributes.addFlashAttribute("message",
                        new Message("error", "Chỉ chấp nhận file ảnh (jpg, jpeg, png, gif)!"));
                return "redirect:/admin/directors.htm";
            }

            String photoPath = context.getRealPath("/uploads/" + fileName);
            daodienPhoto.transferTo(new File(photoPath));
            daoDien.setAnh(fileName);

            Session dbSession = factory.getCurrentSession();
            dbSession.save(daoDien);
            redirectAttributes.addFlashAttribute("message",
                    new Message("success", "Thêm đạo diễn thành công!"));
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Lỗi khi thêm đạo diễn: " + e.getMessage()));
        }
        return "redirect:/admin/directors.htm";
    }

    @RequestMapping(value = "actors/add.htm", method = RequestMethod.POST)
    public String addActor(ModelMap model, @ModelAttribute("dienVien") DienVien dienVien,
                          @RequestParam("actorPhoto") MultipartFile dienVienPhoto,
                          HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        try {
            if (dienVienPhoto.isEmpty()) {
                redirectAttributes.addFlashAttribute("message",
                        new Message("error", "Vui lòng chọn file ảnh!"));
                return "redirect:/admin/actors.htm";
            }

            String fileName = dienVienPhoto.getOriginalFilename();
            if (!fileName.matches(".*\\.(jpg|jpeg|png|gif)$")) {
                redirectAttributes.addFlashAttribute("message",
                        new Message("error", "Chỉ chấp nhận file ảnh (jpg, jpeg, png, gif)!"));
                return "redirect:/admin/actors.htm";
            }

            String photoPath = context.getRealPath("/uploads/" + fileName);
            dienVienPhoto.transferTo(new File(photoPath));
            dienVien.setAnhDienVien(fileName);

            Session dbSession = factory.getCurrentSession();
            dbSession.save(dienVien);
            redirectAttributes.addFlashAttribute("message",
                    new Message("success", "Thêm diễn viên thành công!"));
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Lỗi khi thêm diễn viên: " + e.getMessage()));
        }
        return "redirect:/admin/actors.htm";
    }

    @RequestMapping(value = "directors/upload/{idDaoDien}.htm", method = RequestMethod.POST)
    public String updateDirector(ModelMap model, @ModelAttribute("daoDienUpdate") DaoDien daoDien,
                                @RequestParam(value = "directorPhotoUpdate", required = false) MultipartFile daodienPhoto,
                                HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        try {
            if (daodienPhoto != null && !daodienPhoto.isEmpty()) {
                String fileName = daodienPhoto.getOriginalFilename();
                if (!fileName.matches(".*\\.(jpg|jpeg|png|gif)$")) {
                    redirectAttributes.addFlashAttribute("message",
                            new Message("error", "Chỉ chấp nhận file ảnh (jpg, jpeg, png, gif)!"));
                    return "redirect:/admin/directors.htm";
                }

                String photoPath = context.getRealPath("/uploads/" + fileName);
                daodienPhoto.transferTo(new File(photoPath));
                daoDien.setAnh(fileName);
            }

            Session dbSession = factory.getCurrentSession();
            dbSession.update(daoDien);
            redirectAttributes.addFlashAttribute("message",
                    new Message("success", "Cập nhật đạo diễn thành công!"));
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Lỗi khi cập nhật đạo diễn: " + e.getMessage()));
        }
        return "redirect:/admin/directors.htm";
    }

    @RequestMapping(value = "actors/upload/{idDienVien}.htm", method = RequestMethod.POST)
    public String updateActor(ModelMap model, @ModelAttribute("dienvienUpdate") DienVien dienVien,
                             @RequestParam(value = "actorsPhotoUpdate", required = false) MultipartFile dienVienPhoto,
                             HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        try {
            if (dienVienPhoto != null && !dienVienPhoto.isEmpty()) {
                String fileName = dienVienPhoto.getOriginalFilename();
                if (!fileName.matches(".*\\.(jpg|jpeg|png|gif)$")) {
                    redirectAttributes.addFlashAttribute("message",
                            new Message("error", "Chỉ chấp nhận file ảnh (jpg, jpeg, png, gif)!"));
                    return "redirect:/admin/actors.htm";
                }

                String photoPath = context.getRealPath("/uploads/" + fileName);
                dienVienPhoto.transferTo(new File(photoPath));
                dienVien.setAnhDienVien(fileName);
            }

            Session dbSession = factory.getCurrentSession();
            dbSession.update(dienVien);
            redirectAttributes.addFlashAttribute("message",
                    new Message("success", "Cập nhật diễn viên thành công!"));
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Lỗi khi cập nhật diễn viên: " + e.getMessage()));
        }
        return "redirect:/admin/actors.htm";
    }

    @RequestMapping("order")
    public String order(ModelMap model, HttpSession session, HttpServletRequest request, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        Integer maChiNhanh = chiNhanh.getMaChiNhanh();

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM Ve v " +
                     "JOIN FETCH v.dsLichChieu lc " +
                     "JOIN FETCH lc.dsPhong p " +
                     "JOIN FETCH p.chiNhanh cn " +
                     "WHERE cn.maChiNhanh = :maChiNhanh " +
                     "AND v.khachHang.maKH IS NOT NULL " +
                     "AND v.trangThaiDat = true ";

        String filter = request.getParameter("filter");
        java.sql.Date today = new java.sql.Date(System.currentTimeMillis());
        Calendar calendar = Calendar.getInstance();

        if (filter == null || filter.isEmpty() || filter.equals("today")) {
            hql += " AND v.ngayBan = :today";
        } else if (filter.equals("thisMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            java.sql.Date startOfMonth = new java.sql.Date(calendar.getTimeInMillis());
            calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
            java.sql.Date endOfMonth = new java.sql.Date(calendar.getTimeInMillis());
            hql += " AND v.ngayBan BETWEEN :startOfMonth AND :endOfMonth";
        }

        Query query = dbSession.createQuery(hql);
        query.setParameter("maChiNhanh", maChiNhanh);

        if (filter == null || filter.isEmpty() || filter.equals("today")) {
            query.setParameter("today", today);
        } else if (filter.equals("thisMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            java.sql.Date startOfMonth = new java.sql.Date(calendar.getTimeInMillis());
            calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
            java.sql.Date endOfMonth = new java.sql.Date(calendar.getTimeInMillis());
            query.setParameter("startOfMonth", startOfMonth);
            query.setParameter("endOfMonth", endOfMonth);
        }

        List<Ve> list = query.list();
        model.addAttribute("ve", list);
        return "admin/order";
    }

    public List<Phim> getPhimsTrue() {
        Session session = factory.getCurrentSession();
        String hql = "FROM Phim WHERE NgayKhoiChieu <= :currentDate AND maTT = 1";
        Query query = session.createQuery(hql);
        query.setParameter("currentDate", new Date());
        return query.list();
    }

    public List<PhongChieu> getRooms() {
        Session session = factory.getCurrentSession();
        String hql = "FROM PhongChieu";
        Query query = session.createQuery(hql);
        return query.list();
    }

    public List<PhongChieu> getListRooms(HttpSession session) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        if (taiKhoan == null || nhanVien == null) {
            return new ArrayList<>();
        }

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        Integer maChiNhanh = chiNhanh.getMaChiNhanh();
        Session dbSession = factory.getCurrentSession();
        String hql = "FROM PhongChieu WHERE chiNhanh.maChiNhanh = :maChiNhanh";
        Query query = dbSession.createQuery(hql);
        query.setParameter("maChiNhanh", maChiNhanh);
        return query.list();
    }

    private boolean checkRoomAvailability(Integer maPhim, String maPhong, Date ngayChieu, Time gioChieuTime) {
        Session session = factory.getCurrentSession();
        String hql = "{CALL Check_TrangThaiPhong(:maPhim, :gioChieu, :ngayChieu, :maPhong)}";
        Query query = session.createSQLQuery(hql)
                            .setParameter("maPhim", maPhim)
                            .setParameter("gioChieu", new java.sql.Time(gioChieuTime.getTime()))
                            .setParameter("ngayChieu", new java.sql.Date(ngayChieu.getTime()))
                            .setParameter("maPhong", maPhong);

        try {
            Object result = query.uniqueResult();
            return result instanceof Integer && (Integer) result == 1;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    @RequestMapping("showtimes")
    public String showtimes(@RequestParam(value = "filterDate", required = false) String filterDate,
                           ModelMap model, HttpSession session, HttpServletRequest request, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        NhanVien nhanVien = (NhanVien) session.getAttribute("user");
        if (taiKhoan == null || nhanVien == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        ChiNhanh chiNhanh = nhanVien.getChiNhanh();
        Integer maChiNhanh = chiNhanh.getMaChiNhanh();
        Session dbSession = factory.getCurrentSession();

        if (filterDate == null || filterDate.isEmpty()) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            filterDate = sdf.format(new Date());
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date filterDateParsed;
        try {
            filterDateParsed = sdf.parse(filterDate);
        } catch (ParseException e) {
            e.printStackTrace();
            filterDateParsed = new Date();
        }

        String hql = "FROM LichChieu l WHERE l.dsPhong.chiNhanh.maChiNhanh = :maChiNhanh AND l.ngayChieu = :filterDate ORDER BY l.gioChieu ASC";
        Query query = dbSession.createQuery(hql);
        query.setParameter("filterDate", filterDateParsed);
        query.setParameter("maChiNhanh", maChiNhanh);
        List<LichChieu> list = query.list();

        List<Phim> phimTrue = getPhimsTrue();
        List<PhongChieu> phongChieuTrue = getListRooms(session);

        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date currentTime = new Date();
        String currentTimeString = sdf2.format(currentTime);

        for (LichChieu l : list) {
            try {
                Date ngayChieu = l.getNgayChieu();
                Time gioChieu = l.getGioChieu();
                String gioChieuString = new SimpleDateFormat("HH:mm:ss").format(gioChieu);
                String ngayChieuString = new SimpleDateFormat("yyyy-MM-dd").format(ngayChieu);
                String ngayGioChieuString = ngayChieuString + " " + gioChieuString;
                int dateComparison = currentTimeString.substring(0, 10).compareTo(ngayChieuString);

                if (dateComparison > 0) {
                    l.setTrangThai("Đã chiếu");
                } else if (dateComparison == 0) {
                    if (currentTimeString.substring(11).compareTo(gioChieuString) > 0) {
                        l.setTrangThai("Đã chiếu");
                    } else {
                        l.setTrangThai("Chưa chiếu");
                    }
                } else {
                    l.setTrangThai("Sắp chiếu");
                }
            } catch (Exception e) {
                e.printStackTrace();
                l.setTrangThai("Lỗi");
            }
        }

        List<String> hours = Arrays.asList("08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23");
        List<String> minutes = Arrays.asList("00", "15", "30", "45");
        model.addAttribute("hours", hours);
        model.addAttribute("minutes", minutes);
        model.addAttribute("lc", list);
        model.addAttribute("pct", phongChieuTrue);
        model.addAttribute("pt", phimTrue);
        model.addAttribute("filterDate", filterDate);
        model.addAttribute("dateOptions", getNext7Days());

        return "admin/showtimes";
    }

    private List<String> getNext7Days() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        List<String> dateOptions = new ArrayList<>();
        Calendar calendar = Calendar.getInstance();
        for (int i = 0; i < 7; i++) {
            dateOptions.add(sdf.format(calendar.getTime()));
            calendar.add(Calendar.DATE, 1);
        }
        return dateOptions;
    }

    public Double tinhTongDoanhThuTheoPhim(int maPhim) {
        Session session = factory.getCurrentSession();
        String hql = "SELECT v FROM Ve v JOIN v.dsLichChieu lc JOIN lc.dsPhim p WHERE p.maPhim = :maPhim AND v.trangThaiDat = true";
        Query query = session.createQuery(hql);
        query.setParameter("maPhim", maPhim);
        List<Ve> veList = query.list();
        return veList.stream()
                     .mapToDouble(ve -> ve.getChiTietGhePhong().getLoaiGhe().getGia())
                     .sum();
    }

    public Double tinhTongDoanhThuTheoDaoDien(int maDaoDien) {
        Session session = factory.getCurrentSession();
        String hql = "SELECT p FROM Phim p JOIN p.daoDien dd WHERE dd.idDaoDien = :maDaoDien";
        Query query = session.createQuery(hql);
        query.setParameter("maDaoDien", maDaoDien);
        List<Phim> phimList = query.list();

        double tongDoanhThu = 0;
        for (Phim phim : phimList) {
            tongDoanhThu += tinhTongDoanhThuTheoPhim(phim.getMaPhim());
        }
        return tongDoanhThu;
    }

    public Double tinhTongDoanhThu() {
        List<Phim> phimList = getPhims();
        double tongDoanhThu = 0;
        for (Phim phim : phimList) {
            tongDoanhThu += tinhTongDoanhThuTheoPhim(phim.getMaPhim());
        }
        return tongDoanhThu;
    }

    @RequestMapping("seat")
    public String seat(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM LoaiGhe";
        Query query = dbSession.createQuery(hql);
        List<Object> list = query.list(); // Sửa thành LoaiGhe thay vì Ve
        model.addAttribute("lg", list);
        return "admin/seat";
    }

    @RequestMapping("actors")
    public String actors(ModelMap model, HttpSession session, RedirectAttributes redirectAttributes) {
        TaiKhoan taiKhoan = (TaiKhoan) session.getAttribute("tk");
        if (taiKhoan == null || !taiKhoan.getQuyen().getMaQuyen().trim().equals("QL")) {
            redirectAttributes.addFlashAttribute("message",
                    new Message("error", "Vui lòng đăng nhập với tài khoản quản lý!"));
            return "redirect:/login.htm";
        }

        Session dbSession = factory.getCurrentSession();
        String hql = "FROM DienVien";
        Query query = dbSession.createQuery(hql);
        List<DienVien> list = query.list();
        model.addAttribute("dienvien", list);
        List<Integer> dienVienIds = list.stream().map(DienVien::getIdDienVien).collect(Collectors.toList());

        String roleHql = "SELECT v.tenVaiDien, p.tenPhim, v.dienvien.idDienVien FROM VaiDien v JOIN v.phim p WHERE v.dienvien.idDienVien IN :idDienVienList";
        Query roleQuery = dbSession.createQuery(roleHql);
        roleQuery.setParameterList("idDienVienList", dienVienIds);
        List<Object[]> actorsRolesList = roleQuery.list();
        Map<Integer, List<Object[]>> actorRolesMap = new HashMap<>();
        for (Object[] row : actorsRolesList) {
            Integer actorId = (Integer) row[2];
            actorRolesMap.computeIfAbsent(actorId, k -> new ArrayList<>()).add(row);
        }

        model.addAttribute("actorRolesMap", actorRolesMap);
        return "admin/actors";
    }
}